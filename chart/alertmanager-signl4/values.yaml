replicaCount: 1

image:
  repository: rrednoss/alertmanager-signl4
  pullPolicy: Always # IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Application specific configuration.
signl4:
  # TODO (rrednoss): Unmarshalling into boolean doesn't work so easily.
  # https://github.com/go-yaml/yaml/issues/808
  # https://github.com/go-yaml/yaml/issues/214
  #
  # The application sends an HTTP POST request to the Signl4 webhook. If this option is set
  # to false, the request is aborted if the TLS setup is insecure (e.g. an unknown authority
  # signs the server's certificate).
  allowInsecureTLSConfig: false
  
  # The group key is used to uniquely identify an alert. This key must also be present in the
  # signl4.template setting.
  groupKey: "groupKey"

  # The key in your Alertmanager payload that indicates wether its a new alert or a resolved
  # one. Its value must either be 'Firing' or 'Resolved'.
  statusKey: "status"

  # Enter your personal Signl4 Team Secret. This is required to send the alerts to your app.
  teamSecret: "<enter-your-secret>"

  # The alert manager payload is quite heavy. If you don't convert it, the Signl4 app will
  # contain a lot of information. Specify the fields you want to filter and send to the app.
  #
  # See https://pkg.go.dev/text/template for an explanation of how to configure it. You may
  # be familiar with Go's template syntax from tools like Helm.
  template: |-
    {
        "groupKey": "{{ index . "groupKey" }},
        "name": "{{ index . "name" }}",
        "severity": "{{ index . "severity" }}",
        "status": "{{ index . "status" }}"
    }
